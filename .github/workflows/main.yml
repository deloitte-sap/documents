name: Process Changed Files

on:
  push:
    branches:
      - main

jobs:
  process_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Ensure main branch is fetched from origin
        run: git fetch origin main

      - name: Detect file changes
        id: file_changes
        uses: dorny/paths-filter@v3
        with:
          # Enable listing of files matching each filter.
          # Paths to files will be available in `${FILTER_NAME}_files` output variable.
          # Paths will be formatted as JSON array
          list-files: json
      
          # In this example all changed files are passed to the following action to do
          # some custom processing.
          filters: |
            inserted:
              - added: '**'
            updated:
              - modified: '**'
            removed:
              - deleted: '**'
      - name: Debug - Display detected changes
        run: |
          echo "Detected changes:"
          echo "${{ steps.file_changes.outputs.inserted_files }}"
          echo "${{ steps.file_changes.outputs.updated_files }}"
          echo "${{ steps.file_changes.outputs.removed_files }}"

      - name: Process changed files
        run: |
          echo "Processing changed files..."

          get_files() {
            echo "$1" | jq -r '.[]' | sed 's/^\.\///'
          }

          inserted_files=$(get_files '${{ steps.file_changes.outputs.inserted_files }}')
          updated_files=$(get_files '${{ steps.file_changes.outputs.updated_files }}')
          removed_files=$(get_files '${{ steps.file_changes.outputs.removed_files }}')

          changes=$(jq -n \
            --argjson inserted_files "$inserted_files" \
            --argjson updated_files "$updated_files" \
            --argjson removed_files "$removed_files" \
            '{added: $inserted_files, modified: $updated_files, deleted: $removed_files}')
            
          if [ -z "$changes" ]; then
            echo "No changes detected."
          else
            while IFS= read -r line; do
              OPERATION=$(echo "$line" | cut -d' ' -f1)
              FILE_PATH=$(echo "$line" | cut -d' ' -f2-)

              # Determine URL for the file in the repository
              URL="https://github.com/${{ github.repository }}/blob/main/$FILE_PATH"

              # Determine operation type
              case $OPERATION in
                A) TYPE="added";;
                D) TYPE="deleted";;
                M) TYPE="modified";;
                *) TYPE="unknown";;
              esac

              echo "File: $FILE_PATH"
              echo "Operation: $TYPE"
              echo "URL: $URL"

              # Example API call - replace with your actual endpoint
              # RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d '{"url":"'"$URL"'","operation":"'"$TYPE"'"}' https://yourapi.example.com/endpoint)
              # echo "API Response: $RESPONSE"
            done <<< "$changes"
          fi

      - name: Debug - Processing completed
        run: echo "File processing completed."

      - name: Post results
        run: echo "Files processed successfully."
