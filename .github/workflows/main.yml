name: Process Changed Files

on:
  push:
    paths-ignore:
      - '**/main.yml'
    branches:
      - main

jobs:
  process_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches
      # Install yq
      - name: Install yq
        run: |
          # Install yq (latest version)
          wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Ensure main branch is fetched from origin
        run: git fetch origin main

      - name: Detect file changes
        id: file_changes
        uses: dorny/paths-filter@v3
        with:
          # Enable listing of files matching each filter.
          # Paths to files will be available in `${FILTER_NAME}_files` output variable.
          # Paths will be formatted as JSON array
          list-files: json
      
          # In this example all changed files are passed to the following action to do
          # some custom processing.
          filters: |
            inserted:
              - added: '**'
            updated:
              - modified: '**'
            removed:
              - deleted: '**'
      - name: Debug - Display detected changes
        run: |
          echo "Detected changes:"
          echo "Inserted files: ${{ steps.file_changes.outputs.inserted_files }}"
          echo "Updated files: ${{ steps.file_changes.outputs.updated_files }}"
          echo "Removed files: ${{ steps.file_changes.outputs.removed_files }}"

      - name: Process changed files
        env:
          INSERTED_FILES: ${{ steps.file_changes.outputs.inserted_files }}
          UPDATED_FILES: ${{ steps.file_changes.outputs.updated_files }}
          REMOVED_FILES: ${{ steps.file_changes.outputs.removed_files }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Processing changed files..."

          process_files() {
            local files="$1"
            local operation="$2"
            echo "$files" | jq -r '.[]' | while IFS= read -r FILE_PATH; do
              FILE_PATH="${FILE_PATH#./}"  # Remove leading './'
              if [[ "$FILE_PATH" != */main.yml && "$FILE_PATH" != "" ]]; then  # Skip any path ending with main.yml and empty paths
                INDEX_NAME=$(echo "$FILE_PATH" | awk -F'/' '{print $1}')
                # Check if the file is a .yml file
                if [[ "$FILE_PATH" == *.yml ]]; then
                  BASE_FILE="${FILE_PATH%.yml}"
                  FOUND_FILE=false
                  URLS=()
                
                  # Loop through possible extensions
                  for EXT in "pdf" "docx" "csv" "xlsx"; do
                    CORRESPONDING_FILE="${BASE_FILE}.${EXT}"
                    CORRESPONDING_FILE_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/$CORRESPONDING_FILE"
                    
                    # Check if the corresponding file exists
                    if curl --silent --head --fail "$CORRESPONDING_FILE_URL"; then
                      URLS+=("$CORRESPONDING_FILE_URL")  # Add to list of URLs
                      FOUND_FILE=true
                    fi
                  done
                
                  if ! $FOUND_FILE; then
                    echo "No corresponding file found for $FILE_PATH. Skipping..."
                    continue  # Skip this iteration if no corresponding file is found
                  fi
                
                  # Process each corresponding file URL
                  for URL in "${URLS[@]}"; do
                    echo "Processing corresponding file: $URL"
                    
                    # Check if YML file exists for role assignment
                    YML_FILE_PATH="${BASE_FILE}.yml"
                    echo "Checking for corresponding YML file: $YML_FILE_PATH"
                    
                    if curl --silent --head --fail "https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/$YML_FILE_PATH"; then
                      echo "YML file exists, processing roles."
                      
                      # Fetch YML content
                      YML_CONTENT=$(curl -s "https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/$YML_FILE_PATH")
                      
                      # Extract roles using yq (default to 'everyone' if no roles are found)
                      ROLES=$(echo "$YML_CONTENT" | yq eval '.roles[]' - || echo "everyone")
                      
                      # Convert roles to a comma-separated list
                      ROLE=$(echo "$ROLES" | tr '\n' ',' | sed 's/,$//')
                      echo "Role assigned: $ROLE"
                    else
                      echo "No YML file found for this document. Using default role: everyone"
                      ROLE="everyone"  # Default role if no YML file
                    fi
                
                    # Send request to create document embedding for each valid file URL
                    RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d '{"url":"'"$URL"'","operation":"'"$operation"'", "index_name": "'"$INDEX_NAME"'", "role" : "'"$ROLE"'"}' https://rag-api.cfapps.eu10-004.hana.ondemand.com/create_doc_embedding/)
                    
                    # Optional: Check if the API response was successful
                    if [[ $? -eq 0 ]]; then
                      echo "Document embedding created successfully for $URL"
                    else
                      echo "Failed to create document embedding for $URL. Response: $RESPONSE"
                    fi
                  done
                else
                  # If it's not a .yml file, just use the original URL
                  URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/$FILE_PATH"
                  ROLE="everyone"  # Default role if no YML file
                  echo "File: \"$FILE_PATH\""
                  echo "URL: $URL"
                  
                  # Send request to create document embedding for the file
                  RESPONSE=$(curl -X POST -H "Content-Type: application/json" -d '{"url":"'"$URL"'","operation":"'"$operation"'", "index_name": "'"$INDEX_NAME"'", "role" : "'"$ROLE"'"}' https://rag-api.cfapps.eu10-004.hana.ondemand.com/create_doc_embedding/)
                  echo "API Response: $RESPONSE"
                fi
              else
                echo "Skipping file: \"$FILE_PATH\""
              fi
            done
          }

          echo "Inserted files JSON: \"$INSERTED_FILES\""
          echo "Updated files JSON: \"$UPDATED_FILES\""
          echo "Removed files JSON: \"$REMOVED_FILES\""

          if [ "$INSERTED_FILES" != "[]" ]; then
            process_files "$INSERTED_FILES" "added"
          fi

          if [ "$UPDATED_FILES" != "[]" ]; then
            process_files "$UPDATED_FILES" "modified"
          fi

          if [ "$REMOVED_FILES" != "[]" ]; then
            process_files "$REMOVED_FILES" "deleted"
          fi

      - name: Debug - Processing completed
        run: echo "File processing completed."

      - name: Post results
        run: echo "Files processed successfully."
